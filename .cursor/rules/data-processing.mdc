---
globs: *data*.py,*process*.py
description: Обработка данных для обучения моделей
---

# Обработка данных

## Поддерживаемые форматы

### Текстовые файлы (.txt)
```python
def load_txt_file(file_path):
    """Загружает текстовый файл"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read()
    except UnicodeDecodeError:
        # Пробуем другие кодировки
        for encoding in ['cp1251', 'latin1']:
            try:
                with open(file_path, 'r', encoding=encoding) as f:
                    return f.read()
            except UnicodeDecodeError:
                continue
        raise ValueError(f"Не удалось декодировать файл {file_path}")
```

### CSV файлы (.csv)
```python
import pandas as pd

def load_csv_file(file_path):
    """Загружает CSV файл"""
    try:
        df = pd.read_csv(file_path, encoding='utf-8')
        # Объединяем все текстовые колонки
        text_columns = df.select_dtypes(include=['object']).columns
        return ' '.join(df[text_columns].astype(str).values.flatten())
    except Exception as e:
        logger.error(f"Ошибка загрузки CSV: {e}")
        return ""
```

### JSON файлы (.json)
```python
import json

def load_json_file(file_path):
    """Загружает JSON файл"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # Извлекаем текст из различных структур
        if isinstance(data, dict):
            return ' '.join(str(v) for v in data.values() if isinstance(v, str))
        elif isinstance(data, list):
            return ' '.join(str(item) for item in data if isinstance(item, str))
        else:
            return str(data)
    except Exception as e:
        logger.error(f"Ошибка загрузки JSON: {e}")
        return ""
```

### PDF файлы (.pdf)
```python
import PyPDF2
import pdfplumber

def load_pdf_file(file_path):
    """Загружает PDF файл"""
    text = ""
    
    # Пробуем pdfplumber (лучше для сложных PDF)
    try:
        with pdfplumber.open(file_path) as pdf:
            for page in pdf.pages:
                page_text = page.extract_text()
                if page_text:
                    text += page_text + "\n"
    except Exception:
        # Fallback на PyPDF2
        try:
            with open(file_path, 'rb') as f:
                pdf_reader = PyPDF2.PdfReader(f)
                for page in pdf_reader.pages:
                    text += page.extract_text() + "\n"
        except Exception as e:
            logger.error(f"Ошибка загрузки PDF: {e}")
    
    return text
```

## Предобработка текста

### Очистка текста
```python
import re

def clean_text(text):
    """Очищает текст для обучения"""
    # Удаляем лишние пробелы
    text = re.sub(r'\s+', ' ', text)
    
    # Удаляем специальные символы (оставляем пунктуацию)
    text = re.sub(r'[^\w\s\.\,\!\?\;\:\-\(\)]', '', text)
    
    # Удаляем пустые строки
    text = '\n'.join(line.strip() for line in text.split('\n') if line.strip())
    
    return text.strip()
```

### Разбиение на чанки
```python
def split_text_into_chunks(text, chunk_size=512, overlap=50):
    """Разбивает текст на чанки для обучения"""
    words = text.split()
    chunks = []
    
    for i in range(0, len(words), chunk_size - overlap):
        chunk = ' '.join(words[i:i + chunk_size])
        if len(chunk.strip()) > 0:
            chunks.append(chunk)
    
    return chunks
```

## Сохранение обработанных данных

```python
def save_processed_data(data, output_path):
    """Сохраняет обработанные данные"""
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    
    with open(output_path, 'w', encoding='utf-8') as f:
        if isinstance(data, list):
            for item in data:
                f.write(item + '\n')
        else:
            f.write(data)
```