#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent.parent / "src"))

from metadata_filter import filter_book_metadata, get_filtering_stats
from data_processing import load_file
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_metadata_filtering():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö"""
    
    # –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º
    data_dir = Path("data/raw")
    
    if not data_dir.exists():
        logger.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {data_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    supported_extensions = {'.txt', '.pdf', '.doc', '.docx'}
    
    total_original = 0
    total_filtered = 0
    files_processed = 0
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥")
    print("=" * 60)
    
    for file_path in data_dir.iterdir():
        if file_path.is_file() and file_path.suffix.lower() in supported_extensions:
            try:
                print(f"\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {file_path.name}")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                original_text = load_file(file_path)
                
                if not original_text:
                    print("   ‚ö†Ô∏è –§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å")
                    continue
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                filtered_text = filter_book_metadata(original_text)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = get_filtering_stats(original_text, filtered_text)
                
                # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                print(f"      –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {stats['original_length']:,} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"      –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {stats['filtered_length']:,} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"      –£–¥–∞–ª–µ–Ω–æ: {stats['removed_length']:,} —Å–∏–º–≤–æ–ª–æ–≤ ({stats['removal_percentage']}%)")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                total_original += stats['original_length']
                total_filtered += stats['filtered_length']
                files_processed += 1
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                if stats['removal_percentage'] > 10:
                    print(f"   ‚úÖ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
                elif stats['removal_percentage'] > 5:
                    print(f"   ‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è")
                else:
                    print(f"   ‚ÑπÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                continue
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 60)
    print("üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 60)
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {files_processed}")
    print(f"–û–±—â–∏–π –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {total_original:,} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {total_filtered:,} —Å–∏–º–≤–æ–ª–æ–≤")
    
    if total_original > 0:
        total_removal_percentage = round((total_original - total_filtered) / total_original * 100, 2)
        print(f"–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É–¥–∞–ª–µ–Ω–∏—è: {total_removal_percentage}%")
        print(f"–°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ –º–µ—Å—Ç–∞: {total_original - total_filtered:,} —Å–∏–º–≤–æ–ª–æ–≤")
    
    print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if total_original > 0:
        if total_removal_percentage > 20:
            print("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è! –ú–Ω–æ–≥–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–æ")
        elif total_removal_percentage > 10:
            print("‚úÖ –•–æ—Ä–æ—à–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
        elif total_removal_percentage > 5:
            print("‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã")
        else:
            print("‚ö†Ô∏è –°–ª–∞–±–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö")
    
    print("\nüí° –°–û–í–ï–¢–´:")
    print("- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —É–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
    print("- –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É–∂–µ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–µ–ª–∞–µ—Ç —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ —á–∏—Å—Ç—ã–º")
    print("- –ú–µ–Ω—å—à–µ —à—É–º–∞ = –ª—É—á—à–µ –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")

if __name__ == "__main__":
    test_metadata_filtering()
