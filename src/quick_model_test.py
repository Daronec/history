#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –º–æ–¥–µ–ª–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–∑—É—á–∏–ª–∞ –ª–∏ –º–æ–¥–µ–ª—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã
"""

import os
import sys
from pathlib import Path
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def quick_test_model(model_path: str, model_type: str = "english"):
    """
    –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –º–æ–¥–µ–ª–∏ –Ω–∞ –∑–Ω–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ–≤
    
    Args:
        model_path: –ü—É—Ç—å –∫ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        model_type: –¢–∏–ø –º–æ–¥–µ–ª–∏ ('english' –∏–ª–∏ 'russian')
    """
    try:
        print("üß™ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ú–û–î–ï–õ–ò")
        print("="*50)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ {model_path}...")
        tokenizer = AutoTokenizer.from_pretrained(model_path)
        model = AutoModelForCausalLM.from_pretrained(model_path)
        device = "cuda" if torch.cuda.is_available() else "cpu"
        model.to(device)
        model.eval()
        print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        if model_type == "russian":
            test_questions = [
                "–ö–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ö—É–ª–∏–∫–æ–≤—Å–∫–∞—è –±–∏—Ç–≤–∞?",
                "–ö—Ç–æ –±—ã–ª –ø–µ—Ä–≤—ã–º —Ä—É—Å—Å–∫–∏–º —Ü–∞—Ä–µ–º?",
                "–ö–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∫—Ä–µ—â–µ–Ω–∏–µ –†—É—Å–∏?",
                "–ö—Ç–æ –æ—Ç–º–µ–Ω–∏–ª –∫—Ä–µ–ø–æ—Å—Ç–Ω–æ–µ –ø—Ä–∞–≤–æ?",
                "–ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–æ–π–Ω–∞ 1812 –≥–æ–¥–∞?"
            ]
        else:
            test_questions = [
                "When did the Battle of Kulikovo occur?",
                "Who was the first Russian tsar?",
                "When did the baptism of Rus happen?",
                "Who abolished serfdom in Russia?",
                "When did the Patriotic War of 1812 begin?"
            ]
        
        print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –Ω–∞ {len(test_questions)} –≤–æ–ø—Ä–æ—Å–∞—Ö...")
        print("="*50)
        
        correct_answers = 0
        total_questions = len(test_questions)
        
        for i, question in enumerate(test_questions, 1):
            print(f"\n‚ùì –í–æ–ø—Ä–æ—Å {i}: {question}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            inputs = tokenizer.encode(question, return_tensors="pt").to(device)
            
            with torch.no_grad():
                outputs = model.generate(
                    inputs,
                    max_length=100,
                    temperature=0.7,
                    do_sample=True,
                    pad_token_id=tokenizer.eos_token_id,
                    eos_token_id=tokenizer.eos_token_id,
                    no_repeat_ngram_size=2
                )
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            generated_text = tokenizer.decode(outputs[0], skip_special_tokens=True)
            if generated_text.startswith(question):
                generated_text = generated_text[len(question):].strip()
            
            print(f"ü§ñ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {generated_text}")
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞
            if generated_text and len(generated_text) > 10:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–ø—Ä–æ—Å–∞
                if i == 1 and ("1380" in generated_text or "–∫—É–ª–∏–∫–æ–≤—Å–∫–∞—è" in generated_text.lower()):
                    correct_answers += 1
                    print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!")
                elif i == 2 and ("–∏–≤–∞–Ω" in generated_text.lower() or "–≥—Ä–æ–∑–Ω—ã–π" in generated_text.lower()):
                    correct_answers += 1
                    print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!")
                elif i == 3 and ("988" in generated_text or "–≤–ª–∞–¥–∏–º–∏—Ä" in generated_text.lower()):
                    correct_answers += 1
                    print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!")
                elif i == 4 and ("–∞–ª–µ–∫—Å–∞–Ω–¥—Ä" in generated_text.lower() or "1861" in generated_text):
                    correct_answers += 1
                    print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!")
                elif i == 5 and ("1812" in generated_text or "–Ω–∞–ø–æ–ª–µ–æ–Ω" in generated_text.lower()):
                    correct_answers += 1
                    print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!")
                else:
                    print("‚ö†Ô∏è  –ß–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
            else:
                print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        accuracy = (correct_answers / total_questions) * 100
        print("\n" + "="*50)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê")
        print("="*50)
        print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers}/{total_questions}")
        print(f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%")
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—É—á–µ–Ω–∏—è
        if accuracy >= 80:
            print("üéâ –û–¢–õ–ò–ß–ù–û! –ú–æ–¥–µ–ª—å –æ—Ç–ª–∏—á–Ω–æ –∏–∑—É—á–∏–ª–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã!")
        elif accuracy >= 60:
            print("üëç –•–û–†–û–®–û! –ú–æ–¥–µ–ª—å —Ö–æ—Ä–æ—à–æ –∏–∑—É—á–∏–ª–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã!")
        elif accuracy >= 40:
            print("‚ö†Ô∏è  –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –ú–æ–¥–µ–ª—å —á–∞—Å—Ç–∏—á–Ω–æ –∏–∑—É—á–∏–ª–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
        else:
            print("‚ùå –ü–õ–û–•–û! –ú–æ–¥–µ–ª—å —Å–ª–∞–±–æ –∏–∑—É—á–∏–ª–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
        
        print("="*50)
        
        return accuracy >= 40  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ —Ç–æ—á–Ω–æ—Å—Ç—å >= 40%
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")
    parser.add_argument("model_path", help="–ü—É—Ç—å –∫ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")
    parser.add_argument("--type", default="english", choices=["english", "russian"], 
                       help="–¢–∏–ø –º–æ–¥–µ–ª–∏")
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    if not Path(args.model_path).exists():
        print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {args.model_path}")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    success = quick_test_model(args.model_path, args.type)
    
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
