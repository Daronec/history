"""
–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import json
import re
from pathlib import Path
from typing import List, Dict, Any, Optional
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SimpleHistoryQA:
    """–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏"""
    
    def __init__(self, data_path: str = "data/processed/pdf_history_data.json"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        
        Args:
            data_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        self.data_path = Path(data_path)
        self.historical_data = []
        self.load_data()
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"""
        try:
            if self.data_path.exists():
                with open(self.data_path, 'r', encoding='utf-8') as f:
                    self.historical_data = json.load(f)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.historical_data)} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π")
            else:
                logger.warning(f"–§–∞–π–ª {self.data_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def search_by_keywords(self, query: str) -> List[Dict[str, Any]]:
        """
        –ò—â–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        query_lower = query.lower()
        results = []
        
        for item in self.historical_data:
            text_lower = item['text'].lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            if any(word in text_lower for word in query_lower.split()):
                results.append(item)
        
        return results
    
    def answer_question(self, question: str) -> str:
        """
        –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ –∏—Å—Ç–æ—Ä–∏–∏
        
        Args:
            question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
        """
        question_lower = question.lower()
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        special_answers = {
            '–ª–µ–Ω–∏–Ω': {
                '—Ä–æ–∂–¥–µ–Ω–∏–µ': '–í–ª–∞–¥–∏–º–∏—Ä –ò–ª—å–∏—á –õ–µ–Ω–∏–Ω —Ä–æ–¥–∏–ª—Å—è 22 –∞–ø—Ä–µ–ª—è 1870 –≥–æ–¥–∞ –≤ –°–∏–º–±–∏—Ä—Å–∫–µ.',
                '—Å–º–µ—Ä—Ç—å': '–í–ª–∞–¥–∏–º–∏—Ä –ò–ª—å–∏—á –õ–µ–Ω–∏–Ω —É–º–µ—Ä 21 —è–Ω–≤–∞—Ä—è 1924 –≥–æ–¥–∞ –≤ –ì–æ—Ä–∫–∞—Ö.',
                '–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è': '–í–ª–∞–¥–∏–º–∏—Ä –ò–ª—å–∏—á –õ–µ–Ω–∏–Ω —Ä–æ–¥–∏–ª—Å—è 22 –∞–ø—Ä–µ–ª—è 1870 –≥–æ–¥–∞.',
                '–∫–æ–≥–¥–∞ —Ä–æ–¥–∏–ª—Å—è': '–í–ª–∞–¥–∏–º–∏—Ä –ò–ª—å–∏—á –õ–µ–Ω–∏–Ω —Ä–æ–¥–∏–ª—Å—è 22 –∞–ø—Ä–µ–ª—è 1870 –≥–æ–¥–∞.',
                '–∫–æ–≥–¥–∞ —É–º–µ—Ä': '–í–ª–∞–¥–∏–º–∏—Ä –ò–ª—å–∏—á –õ–µ–Ω–∏–Ω —É–º–µ—Ä 21 —è–Ω–≤–∞—Ä—è 1924 –≥–æ–¥–∞.'
            },
            '–ø–µ—Ç—Ä': {
                '—Ä–æ–∂–¥–µ–Ω–∏–µ': '–ü–µ—Ç—Ä I –í–µ–ª–∏–∫–∏–π —Ä–æ–¥–∏–ª—Å—è 9 –∏—é–Ω—è 1672 –≥–æ–¥–∞.',
                '—Å–º–µ—Ä—Ç—å': '–ü–µ—Ç—Ä I –í–µ–ª–∏–∫–∏–π —É–º–µ—Ä 8 —Ñ–µ–≤—Ä–∞–ª—è 1725 –≥–æ–¥–∞.',
                '—Ä–µ—Ñ–æ—Ä–º—ã': '–ü–µ—Ç—Ä I –ø—Ä–æ–≤–µ–ª –º–∞—Å—à—Ç–∞–±–Ω—ã–µ —Ä–µ—Ñ–æ—Ä–º—ã –≤ –†–æ—Å—Å–∏–∏, –≤–∫–ª—é—á–∞—è —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –∞—Ä–º–∏–∏ –∏ —Ñ–ª–æ—Ç–∞, –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞ –≤ 1703 –≥–æ–¥—É.',
                '–∏–∑–≤–µ—Å—Ç–µ–Ω': '–ü–µ—Ç—Ä I –∏–∑–≤–µ—Å—Ç–µ–Ω —Å–≤–æ–∏–º–∏ —Ä–µ—Ñ–æ—Ä–º–∞–º–∏, —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –∞—Ä–º–∏–∏ –∏ —Ñ–ª–æ—Ç–∞, –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞.'
            },
            '1812': {
                '–≤–æ–π–Ω–∞': '–í 1812 –≥–æ–¥—É –ø—Ä–æ–∏–∑–æ—à–ª–∞ –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–æ–π–Ω–∞ –º–µ–∂–¥—É –†–æ—Å—Å–∏–µ–π –∏ –§—Ä–∞–Ω—Ü–∏–µ–π –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –ù–∞–ø–æ–ª–µ–æ–Ω–∞.',
                '–Ω–∞–ø–æ–ª–µ–æ–Ω': '–í 1812 –≥–æ–¥—É –ù–∞–ø–æ–ª–µ–æ–Ω –ë–æ–Ω–∞–ø–∞—Ä—Ç –≤—Ç–æ—Ä–≥—Å—è –≤ –†–æ—Å—Å–∏—é —Å –∞—Ä–º–∏–µ–π –≤ 600 —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ–∫.',
                '—Å–æ–±—ã—Ç–∏–µ': '–í 1812 –≥–æ–¥—É –ø—Ä–æ–∏–∑–æ—à–ª–∞ –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–æ–π–Ω–∞ - –≤–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏.'
            },
            '—Ä–µ–≤–æ–ª—é—Ü–∏—è': {
                '1917': '–†–µ–≤–æ–ª—é—Ü–∏—è 1917 –≥–æ–¥–∞ –ø—Ä–∏–≤–µ–ª–∞ –∫ —Å–≤–µ—Ä–∂–µ–Ω–∏—é –í—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é —Å–æ–≤–µ—Ç—Å–∫–æ–π –≤–ª–∞—Å—Ç–∏ –≤ –†–æ—Å—Å–∏–∏.',
                '–æ–∫—Ç—è–±—Ä—å—Å–∫–∞—è': '–û–∫—Ç—è–±—Ä—å—Å–∫–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è 1917 –≥–æ–¥–∞ –ø—Ä–∏–≤–µ–ª–∞ –∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é —Å–æ–≤–µ—Ç—Å–∫–æ–π –≤–ª–∞—Å—Ç–∏.'
            }
        }
        
        # –ò—â–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        for key, answers in special_answers.items():
            if key in question_lower:
                for answer_key, answer in answers.items():
                    if answer_key in question_lower:
                        return answer
        
        # –ï—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç, –∏—â–µ–º –≤ –¥–∞–Ω–Ω—ã—Ö
        search_results = self.search_by_keywords(question)
        
        if search_results:
            # –ë–µ—Ä–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            best_result = search_results[0]
            return f"–°–æ–≥–ª–∞—Å–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º: {best_result['text']}"
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å."
    
    def get_random_fact(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç"""
        if self.historical_data:
            import random
            fact = random.choice(self.historical_data)
            return f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç: {fact['text']}"
        return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö."
    
    def get_facts_by_category(self, category: str) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–∫—Ç—ã –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        Args:
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è (–≤–æ–π–Ω–∞, —Ä–µ—Ñ–æ—Ä–º—ã, –ø–æ–ª–∏—Ç–∏–∫–∞, etc.)
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–æ–≤
        """
        facts = []
        for item in self.historical_data:
            if item.get('category', '').lower() == category.lower():
                facts.append(item['text'])
        return facts
    
    def get_facts_by_period(self, period: str) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–∫—Ç—ã –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
        
        Args:
            period: –ü–µ—Ä–∏–æ–¥ (X –≤–µ–∫, XVIII –≤–µ–∫, etc.)
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–æ–≤
        """
        facts = []
        for item in self.historical_data:
            if period.lower() in item.get('period', '').lower():
                facts.append(item['text'])
        return facts

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üìö –°–∏—Å—Ç–µ–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏")
    print("=" * 60)
    
    qa_system = SimpleHistoryQA()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    test_questions = [
        "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –õ–µ–Ω–∏–Ω–∞",
        "–ö–æ–≥–¥–∞ —É–º–µ—Ä –õ–µ–Ω–∏–Ω?",
        "–ß—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –æ –ü–µ—Ç—Ä–µ I?",
        "–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ 1812 –≥–æ–¥—É?",
        "–†–µ–≤–æ–ª—é—Ü–∏—è 1917 –≥–æ–¥–∞",
        "–†–µ—Ñ–æ—Ä–º—ã –ü–µ—Ç—Ä–∞ I"
    ]
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤:")
    for i, question in enumerate(test_questions, 1):
        print(f"\n{i}. –í–æ–ø—Ä–æ—Å: {question}")
        answer = qa_system.answer_question(question)
        print(f"   –û—Ç–≤–µ—Ç: {answer}")
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    print("\nüéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º:")
    print("–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏ (–∏–ª–∏ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):")
    
    while True:
        try:
            question = input("\n–í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()
            if question.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit']:
                break
            
            if question:
                answer = qa_system.answer_question(question)
                print(f"–û—Ç–≤–µ—Ç: {answer}")
        except KeyboardInterrupt:
            print("\n\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
