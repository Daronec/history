#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PyMuPDF
"""

import os
import sys
from pathlib import Path
import logging
from typing import Optional, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from data_processing import load_file

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def extract_text_with_pymupdf(pdf_path: Path) -> Optional[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF —Å –ø–æ–º–æ—â—å—é PyMuPDF (fitz)
    
    Args:
        pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
        
    Returns:
        –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None
    """
    try:
        import fitz  # PyMuPDF
        
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {pdf_path.name} —Å –ø–æ–º–æ—â—å—é PyMuPDF")
        
        doc = fitz.open(pdf_path)
        all_text = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        for page_num in range(len(doc)):
            page = doc[page_num]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            page_text = page.get_text()
            
            if page_text.strip():
                all_text.append(page_text)
                logger.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}: {len(page_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            else:
                logger.warning(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}: –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞")
        
        doc.close()
        
        if all_text:
            return '\n\n'.join(all_text)
        else:
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å PyMuPDF: {e}")
        return None

def extract_text_with_pdfplumber(pdf_path: Path) -> Optional[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF —Å –ø–æ–º–æ—â—å—é pdfplumber
    
    Args:
        pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
        
    Returns:
        –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None
    """
    try:
        import pdfplumber
        
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {pdf_path.name} —Å –ø–æ–º–æ—â—å—é pdfplumber")
        
        all_text = []
        
        with pdfplumber.open(pdf_path) as pdf:
            for page_num, page in enumerate(pdf.pages):
                page_text = page.extract_text()
                
                if page_text and page_text.strip():
                    all_text.append(page_text)
                    logger.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}: {len(page_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                else:
                    logger.warning(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}: –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞")
        
        if all_text:
            return '\n\n'.join(all_text)
        else:
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å pdfplumber: {e}")
        return None

def alternative_pdf_processing(pdf_path: Path) -> Optional[str]:
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
    
    Args:
        pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
        
    Returns:
        –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None
    """
    logger.info(f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {pdf_path.name}")
    
    # –ú–µ—Ç–æ–¥ 1: –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    text1 = load_file(pdf_path)
    logger.info(f"–ú–µ—Ç–æ–¥ 1 (–æ–±—ã—á–Ω—ã–π): {len(text1) if text1 else 0} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ú–µ—Ç–æ–¥ 2: PyMuPDF
    text2 = extract_text_with_pymupdf(pdf_path)
    logger.info(f"–ú–µ—Ç–æ–¥ 2 (PyMuPDF): {len(text2) if text2 else 0} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ú–µ—Ç–æ–¥ 3: pdfplumber
    text3 = extract_text_with_pdfplumber(pdf_path)
    logger.info(f"–ú–µ—Ç–æ–¥ 3 (pdfplumber): {len(text3) if text3 else 0} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    texts = [text1, text2, text3]
    best_text = max(texts, key=lambda x: len(x) if x else 0)
    
    if best_text and len(best_text) > 100:
        logger.info(f"‚úÖ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(best_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        return best_text
    else:
        logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–∫—Å—Ç–∞")
        return None

def process_test_data_alternative():
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ test_data –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
    """
    test_data_dir = Path("test_data")
    
    if not test_data_dir.exists():
        logger.error("–ü–∞–ø–∫–∞ test_data –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    pdf_files = list(test_data_dir.glob("*.pdf"))
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤: {len(pdf_files)}")
    
    all_texts = []
    
    for pdf_file in pdf_files:
        logger.info(f"\n{'='*60}")
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {pdf_file.name}")
        
        text = alternative_pdf_processing(pdf_file)
        
        if text:
            all_texts.append({
                'filename': pdf_file.name,
                'text': text,
                'length': len(text)
            })
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(text):,} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: {pdf_file.name}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if all_texts:
        output_file = Path("data/processed/alternative_pdf_data.json")
        output_file.parent.mkdir(parents=True, exist_ok=True)
        
        import json
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(all_texts, f, ensure_ascii=False, indent=2)
        
        logger.info(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
        logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(all_texts)}")
        logger.info(f"üìù –û–±—â–∏–π –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞: {sum(item['length'] for item in all_texts):,} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        for item in all_texts:
            logger.info(f"  - {item['filename']}: {item['length']:,} —Å–∏–º–≤–æ–ª–æ–≤")
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")

if __name__ == "__main__":
    process_test_data_alternative()
