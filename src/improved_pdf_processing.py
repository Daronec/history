#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π OCR
"""

import os
import sys
from pathlib import Path
import logging
from typing import Optional, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from data_processing import load_file

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def extract_text_with_ocr(pdf_path: Path) -> Optional[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF —Å –ø–æ–º–æ—â—å—é OCR (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    
    Args:
        pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
        
    Returns:
        –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None
    """
    try:
        import pytesseract
        from PIL import Image
        import fitz  # PyMuPDF
        
        logger.info(f"–ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OCR –¥–ª—è {pdf_path.name}")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF —Å –ø–æ–º–æ—â—å—é PyMuPDF
        doc = fitz.open(pdf_path)
        all_text = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–∞–Ω–∏—Ü (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–∏—Å—Ç–µ–º—É)
        max_pages = min(5, len(doc))
        
        for page_num in range(max_pages):
            page = doc[page_num]
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
            page_text = page.get_text()
            if page_text.strip():
                all_text.append(page_text)
                logger.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}: –∏–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç ({len(page_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
            else:
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è OCR
                try:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    pix = page.get_pixmap(matrix=fitz.Matrix(2, 2))  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                    img_data = pix.tobytes("png")
                    
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é PIL
                    import io
                    img = Image.open(io.BytesIO(img_data))
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º OCR
                    ocr_text = pytesseract.image_to_string(img, lang='rus+eng')
                    
                    if ocr_text.strip():
                        all_text.append(ocr_text)
                        logger.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}: OCR –∏–∑–≤–ª–µ–∫ —Ç–µ–∫—Å—Ç ({len(ocr_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    else:
                        logger.warning(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}: OCR –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç")
                        
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ OCR –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num + 1}: {e}")
        
        doc.close()
        
        if all_text:
            return '\n\n'.join(all_text)
        else:
            return None
            
    except ImportError:
        logger.warning("OCR –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ OCR –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        return None

def improved_pdf_processing(pdf_path: Path) -> Optional[str]:
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–∞
    
    Args:
        pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
        
    Returns:
        –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None
    """
    logger.info(f"–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {pdf_path.name}")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    text = load_file(pdf_path)
    
    if text and len(text) > 1000:  # –ï—Å–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–∫—Å—Ç–∞
        logger.info(f"–û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        return text
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –º–∞–ª–æ, –ø—ã—Ç–∞–µ–º—Å—è OCR
    logger.info(f"–ú–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ ({len(text) if text else 0} —Å–∏–º–≤–æ–ª–æ–≤), –ø—Ä–æ–±—É–µ–º OCR...")
    ocr_text = extract_text_with_ocr(pdf_path)
    
    if ocr_text and len(ocr_text) > len(text or ""):
        logger.info(f"OCR —É—Å–ø–µ—à–µ–Ω: {len(ocr_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        return ocr_text
    elif text:
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        return text
    else:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ {pdf_path.name}")
        return None

def process_test_data_improved():
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ test_data —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
    """
    test_data_dir = Path("test_data")
    
    if not test_data_dir.exists():
        logger.error("–ü–∞–ø–∫–∞ test_data –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    pdf_files = list(test_data_dir.glob("*.pdf"))
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤: {len(pdf_files)}")
    
    all_texts = []
    
    for pdf_file in pdf_files:
        logger.info(f"\n{'='*50}")
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {pdf_file.name}")
        
        text = improved_pdf_processing(pdf_file)
        
        if text:
            all_texts.append({
                'filename': pdf_file.name,
                'text': text,
                'length': len(text)
            })
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(text):,} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: {pdf_file.name}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if all_texts:
        output_file = Path("data/processed/improved_pdf_data.json")
        output_file.parent.mkdir(parents=True, exist_ok=True)
        
        import json
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(all_texts, f, ensure_ascii=False, indent=2)
        
        logger.info(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
        logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(all_texts)}")
        logger.info(f"üìù –û–±—â–∏–π –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞: {sum(item['length'] for item in all_texts):,} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        for item in all_texts:
            logger.info(f"  - {item['filename']}: {item['length']:,} —Å–∏–º–≤–æ–ª–æ–≤")
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")

if __name__ == "__main__":
    process_test_data_improved()
