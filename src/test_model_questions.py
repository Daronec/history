#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö
"""

import argparse
import sys
from pathlib import Path
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from models.history_ai import HistoryAIModel

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
HISTORICAL_QUESTIONS = [
    "–í –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏ –≤–∞–∂–Ω—ã–º —Å–æ–±—ã—Ç–∏–µ–º –±—ã–ª–æ",
    "–ü–µ—Ç—Ä I –ø—Ä–æ–≤–µ–ª –≤–∞–∂–Ω—ã–µ —Ä–µ—Ñ–æ—Ä–º—ã",
    "–†–µ–≤–æ–ª—é—Ü–∏—è 1917 –≥–æ–¥–∞",
    "–í–µ–ª–∏–∫–∞—è –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–æ–π–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å",
    "–ò–≤–∞–Ω –ì—Ä–æ–∑–Ω—ã–π –ø—Ä–∞–≤–∏–ª",
    "–ö—Ä–µ—â–µ–Ω–∏–µ –†—É—Å–∏ –ø—Ä–æ–∏–∑–æ—à–ª–æ",
    "–°—Ç–æ–ª—ã–ø–∏–Ω—Å–∫–∏–µ —Ä–µ—Ñ–æ—Ä–º—ã –≤–∫–ª—é—á–∞–ª–∏",
    "–°–º—É—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ –†–æ—Å—Å–∏–∏",
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ II –±—ã–ª–∞ –∏–∑–≤–µ—Å—Ç–Ω–∞",
    "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä II –æ—Ç–º–µ–Ω–∏–ª –∫—Ä–µ–ø–æ—Å—Ç–Ω–æ–µ –ø—Ä–∞–≤–æ"
]

def test_model_questions(model_path: str, max_length: int = 100):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö
    
    Args:
        model_path: –ü—É—Ç—å –∫ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ {model_path}")
        model = HistoryAIModel()
        model.load_trained_model(model_path, task_type='generation')
        
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö")
        print("=" * 60)
        
        for i, question in enumerate(HISTORICAL_QUESTIONS, 1):
            print(f"\nüìù –í–æ–ø—Ä–æ—Å {i}: {question}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            result = model.generate_text(
                prompt=question,
                max_length=max_length,
                temperature=0.7
            )
            
            print(f"ü§ñ –û—Ç–≤–µ—Ç: {result}")
            print("-" * 40)
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        sys.exit(1)

def main():
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö')
    parser.add_argument('--model', type=str, required=True, help='–ü—É—Ç—å –∫ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏')
    parser.add_argument('--max_length', type=int, default=100, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞')
    
    args = parser.parse_args()
    
    test_model_questions(args.model, args.max_length)

if __name__ == "__main__":
    main()
