#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è –ò–ò –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
"""

import os
import sys
from pathlib import Path

def main():
    print("üèõÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–ò –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏!")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import torch
        import transformers
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except ImportError:
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python setup_ai.py")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
    required_dirs = ["src", "notebooks", "data", "models"]
    missing_dirs = [d for d in required_dirs if not os.path.exists(d)]
    
    if missing_dirs:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–ø–∫–∏: {', '.join(missing_dirs)}")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python setup_ai.py")
        return
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≥–æ—Ç–æ–≤–∞")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    while True:
        print("\nüéØ –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?")
        print("1. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Jupyter Notebook")
        print("2. ü§ñ –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö")
        print("3. üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç")
        print("4. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞")
        print("5. ‚ùå –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-5): ").strip()
        
        if choice == "1":
            print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Jupyter Notebook...")
            os.system("jupyter notebook notebooks/getting_started.ipynb")
            
        elif choice == "2":
            print("\nü§ñ –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö...")
            os.system("python src/train_model.py --data sample --task generation --epochs 2")
            
        elif choice == "3":
            print("\nüìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç...")
            try:
                from src.models.history_ai import HistoryAIModel
                
                print("–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å...")
                ai_model = HistoryAIModel()
                ai_model.load_model("generation")
                
                prompt = input("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–í 1812 –≥–æ–¥—É –ø—Ä–æ–∏–∑–æ—à–ª–æ'): ")
                if not prompt:
                    prompt = "–í –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏ –≤–∞–∂–Ω—ã–º —Å–æ–±—ã—Ç–∏–µ–º –±—ã–ª–æ"
                
                result = ai_model.generate_text(prompt, max_length=150)
                print(f"\nüéØ –ü—Ä–æ–º–ø—Ç: {prompt}")
                print(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                
        elif choice == "4":
            print("\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:")
            for root, dirs, files in os.walk("."):
                level = root.replace(".", "").count(os.sep)
                indent = " " * 2 * level
                print(f"{indent}{os.path.basename(root)}/")
                subindent = " " * 2 * (level + 1)
                for file in files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
                    print(f"{subindent}{file}")
                if len(files) > 5:
                    print(f"{subindent}... –∏ –µ—â–µ {len(files) - 5} —Ñ–∞–π–ª–æ–≤")
                    
        elif choice == "5":
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    main()
