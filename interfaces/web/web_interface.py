#!/usr/bin/env python3
"""
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ò–ò –º–æ–¥–µ–ª–∏ –∏–∑—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '../../src'))

from flask import Flask, render_template, request, jsonify
import json
from datetime import datetime
from models.history_ai import HistoryAIModel
from models.history_ai_ru import HistoryAIModelRU

app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–µ–π
english_model = None
russian_model = None

def load_models():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±–µ –º–æ–¥–µ–ª–∏"""
    global english_model, russian_model
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
    project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '../..'))
    models_path = os.path.join(project_root, 'models')
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫—É—é –º–æ–¥–µ–ª—å
        print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫—É—é –º–æ–¥–µ–ª—å...")
        english_model = HistoryAIModel()
        english_model.load_trained_model(os.path.join(models_path, 'history_ai_trained'))
        print("‚úÖ –ê–Ω–≥–ª–∏–π—Å–∫–∞—è –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—É—Å—Å–∫—É—é –º–æ–¥–µ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—É—Å—Å–∫—É—é –º–æ–¥–µ–ª—å...")
            russian_model = HistoryAIModelRU()
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é
            try:
                russian_model.load_trained_model(os.path.join(models_path, 'history_ai_ru_trained'))
                print("‚úÖ –û–±—É—á–µ–Ω–Ω–∞—è —Ä—É—Å—Å–∫–∞—è –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            except:
                print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é —Ä—É—Å—Å–∫—É—é –º–æ–¥–µ–ª—å...")
                russian_model.load_model('generation')
                print("‚úÖ –ü—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–∞—è —Ä—É—Å—Å–∫–∞—è –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è –†—É—Å—Å–∫–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {e}")
            russian_model = None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
        english_model = None
        russian_model = None

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template('index.html')

@app.route('/api/generate', methods=['POST'])
def generate_text():
    """API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"""
    try:
        data = request.get_json()
        prompt = data.get('prompt', '').strip()
        language = data.get('language', 'russian')
        max_length = int(data.get('max_length', 100))
        temperature = float(data.get('temperature', 0.7))
        
        if not prompt:
            return jsonify({'error': '–ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
        
        # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
        if language == 'russian' and russian_model:
            model = russian_model
            model_name = "–†—É—Å—Å–∫–∞—è –º–æ–¥–µ–ª—å (rugpt3small)"
        elif language == 'english' and english_model:
            model = english_model
            model_name = "–ê–Ω–≥–ª–∏–π—Å–∫–∞—è –º–æ–¥–µ–ª—å (distilgpt2)"
        else:
            # Fallback –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
            if russian_model:
                model = russian_model
                model_name = "–†—É—Å—Å–∫–∞—è –º–æ–¥–µ–ª—å (rugpt3small)"
            elif english_model:
                model = english_model
                model_name = "–ê–Ω–≥–ª–∏–π—Å–∫–∞—è –º–æ–¥–µ–ª—å (distilgpt2)"
            else:
                return jsonify({'error': '–ú–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'}), 500
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        result = model.generate_text(
            prompt=prompt,
            max_length=max_length,
            temperature=temperature
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        history_entry = {
            'timestamp': datetime.now().isoformat(),
            'prompt': prompt,
            'result': result,
            'language': language,
            'model': model_name,
            'parameters': {
                'max_length': max_length,
                'temperature': temperature
            }
        }
        
        save_to_history(history_entry)
        
        return jsonify({
            'success': True,
            'result': result,
            'model': model_name,
            'timestamp': history_entry['timestamp']
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}'}), 500

@app.route('/api/history')
def get_history():
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        history = load_history()
        return jsonify({'success': True, 'history': history})
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}'}), 500

@app.route('/api/status')
def get_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π"""
    return jsonify({
        'english_model': english_model is not None,
        'russian_model': russian_model is not None,
        'timestamp': datetime.now().isoformat()
    })

def save_to_history(entry):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    try:
        history_file = '../../web_history.json'
        history = []
        
        if os.path.exists(history_file):
            with open(history_file, 'r', encoding='utf-8') as f:
                history = json.load(f)
        
        history.append(entry)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 100 –∑–∞–ø–∏—Å—è–º–∏
        if len(history) > 100:
            history = history[-100:]
        
        with open(history_file, 'w', encoding='utf-8') as f:
            json.dump(history, f, ensure_ascii=False, indent=2)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

def load_history():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        history_file = '../../web_history.json'
        if os.path.exists(history_file):
            with open(history_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        return []
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return []

if __name__ == '__main__':
    print("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –ò–ò –º–æ–¥–µ–ª–∏ –∏–∑—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
    os.makedirs('templates', exist_ok=True)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
    load_models()
    
    print("üöÄ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
    print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:5000")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    app.run(debug=True, host='0.0.0.0', port=5000)
