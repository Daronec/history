#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π Windows –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ò–ò-–ò—Å—Ç–æ—Ä–∏—è
–í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏: –ø—Ä–æ–º–ø—Ç—ã, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏, –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
"""

import sys
import os
import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext
import threading
import subprocess
import json
from pathlib import Path
import logging

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows
if sys.platform.startswith('win'):
    import codecs
    try:
        sys.stdout = codecs.getwriter('utf-8')(sys.stdout.detach())
        sys.stderr = codecs.getwriter('utf-8')(sys.stderr.detach())
    except:
        pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/interface.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class UniversalHistoryInterface:
    def __init__(self):
        self.root = tk.Tk()
        self.setup_paths()
        self.setup_ui()
        self.load_models()
        
    def is_exe(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –∫–∞–∫ exe —Ñ–∞–π–ª"""
        return getattr(sys, 'frozen', False)
    
    def setup_paths(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—É—Ç–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ exe –∏ dev —Ä–µ–∂–∏–º–∞—Ö"""
        if self.is_exe():
            # –í exe —Ä–µ–∂–∏–º–µ - –ø—É—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ exe —Ñ–∞–π–ª–∞
            self.BASE_DIR = Path(sys.executable).parent
        else:
            # –í dev —Ä–µ–∂–∏–º–µ - –ø—É—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–µ–∫—Ç–∞
            self.BASE_DIR = Path(__file__).parent.parent.parent
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.MODELS_DIR = self.BASE_DIR / "models"
        self.DATA_DIR = self.BASE_DIR / "data"
        self.SRC_DIR = self.BASE_DIR / "src"
        self.SCRIPTS_DIR = self.BASE_DIR / "scripts"
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for directory in [self.MODELS_DIR, self.DATA_DIR / "raw", self.DATA_DIR / "processed"]:
            directory.mkdir(parents=True, exist_ok=True)
        
        logger.info(f"–ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.BASE_DIR}")
        logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥–µ–ª–µ–π: {self.MODELS_DIR}")
        logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: {self.DATA_DIR}")
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        self.root.title("–ò–ò-–ò—Å—Ç–æ—Ä–∏—è - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        self.root.geometry("1600x1000")
        self.root.configure(bg='#ecf0f1')
        
        # –®—Ä–∏—Ñ—Ç—ã
        self.title_font = ('Arial', 16, 'bold')
        self.button_font = ('Arial', 10, 'bold')
        self.text_font = ('Arial', 10)
        
        # –°—Ç–∞—Ç—É—Å-–±–∞—Ä (—Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–º)
        self.create_status_bar()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_main_layout()
    
    def create_main_layout(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–º–ø–æ–Ω–æ–≤–∫—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = tk.Frame(self.root, bg='#ecf0f1')
        main_container.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ (—É–≤–µ–ª–∏—á–µ–Ω–∞ —à–∏—Ä–∏–Ω–∞)
        left_panel = tk.Frame(main_container, bg='#ecf0f1', width=500)
        left_panel.pack(side='left', fill='y', padx=(0, 10))
        left_panel.pack_propagate(False)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ä–∞–±–æ—Ç–∞ —Å –ò–ò
        right_panel = tk.Frame(main_container, bg='#ecf0f1')
        right_panel.pack(side='right', fill='both', expand=True)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–Ω–µ–ª–µ–π
        self.create_file_management_panel(left_panel)
        self.create_ai_panel(right_panel)
    
    def create_file_management_panel(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(
            parent,
            text="üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏",
            font=self.title_font,
            bg='#ecf0f1',
            fg='#2c3e50'
        )
        title_label.pack(pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏ (–≤ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏)
        file_buttons_frame = tk.Frame(parent, bg='#ecf0f1')
        file_buttons_frame.pack(fill='x', pady=(0, 10))
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
        buttons_row1 = tk.Frame(file_buttons_frame, bg='#ecf0f1')
        buttons_row1.pack(fill='x', pady=(0, 5))
        
        self.upload_btn = tk.Button(
            buttons_row1,
            text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã",
            font=self.button_font,
            command=self.upload_file,
            bg='#3498db',
            fg='white',
            relief='flat',
            padx=15,
            pady=8
        )
        self.upload_btn.pack(side='left', padx=(0, 5), fill='x', expand=True)
        
        self.refresh_btn = tk.Button(
            buttons_row1,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            font=self.button_font,
            command=self.refresh_file_list,
            bg='#2ecc71',
            fg='white',
            relief='flat',
            padx=15,
            pady=8
        )
        self.refresh_btn.pack(side='left', padx=5, fill='x', expand=True)
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
        buttons_row2 = tk.Frame(file_buttons_frame, bg='#ecf0f1')
        buttons_row2.pack(fill='x')
        
        self.open_folder_btn = tk.Button(
            buttons_row2,
            text="üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É",
            font=self.button_font,
            command=self.open_data_folder,
            bg='#9b59b6',
            fg='white',
            relief='flat',
            padx=15,
            pady=8
        )
        self.open_folder_btn.pack(fill='x')
        
        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        files_frame = tk.Frame(parent, bg='#ecf0f1')
        files_frame.pack(fill='both', expand=True, pady=(0, 10))
        
        files_label = tk.Label(
            files_frame,
            text="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:",
            font=self.button_font,
            bg='#ecf0f1',
            fg='#2c3e50'
        )
        files_label.pack(anchor='w', pady=(0, 5))
        
        # Treeview –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        self.files_tree = ttk.Treeview(
            files_frame,
            columns=('size', 'date'),
            show='tree headings',
            height=8
        )
        self.files_tree.heading('#0', text='–ò–º—è —Ñ–∞–π–ª–∞')
        self.files_tree.heading('size', text='–†–∞–∑–º–µ—Ä')
        self.files_tree.heading('date', text='–î–∞—Ç–∞')
        
        self.files_tree.column('#0', width=200)
        self.files_tree.column('size', width=80)
        self.files_tree.column('date', width=100)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        files_scrollbar = ttk.Scrollbar(files_frame, orient='vertical', command=self.files_tree.yview)
        self.files_tree.configure(yscrollcommand=files_scrollbar.set)
        
        self.files_tree.pack(side='left', fill='both', expand=True)
        files_scrollbar.pack(side='right', fill='y')
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.files_tree.bind('<Double-1>', self.on_file_double_click)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
        retrain_frame = tk.Frame(parent, bg='#ecf0f1')
        retrain_frame.pack(fill='x', pady=(10, 0))
        
        self.retrain_btn = tk.Button(
            retrain_frame,
            text="üéì –ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏",
            font=self.button_font,
            command=self.retrain_models,
            bg='#e74c3c',
            fg='white',
            relief='flat',
            padx=15,
            pady=10
        )
        self.retrain_btn.pack(fill='x')
        
        # –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
        self.test_btn = tk.Button(
            retrain_frame,
            text="üß™ –¢–µ—Å—Ç –º–æ–¥–µ–ª–∏",
            font=self.button_font,
            command=self.test_model,
            bg='#f39c12',
            fg='white',
            relief='flat',
            padx=15,
            pady=10
        )
        self.test_btn.pack(fill='x', pady=(5, 0))
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
        self.progress_frame = tk.Frame(parent, bg='#ecf0f1')
        self.progress_frame.pack(fill='x', pady=(10, 0))
        
        self.progress_label = tk.Label(
            self.progress_frame,
            text="–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è:",
            font=self.text_font,
            bg='#ecf0f1',
            fg='#2c3e50'
        )
        self.progress_label.pack(anchor='w')
        
        self.progress_bar = ttk.Progressbar(
            self.progress_frame,
            mode='determinate'
        )
        self.progress_bar.pack(fill='x', pady=(5, 0))
        
        self.progress_percent = tk.Label(
            self.progress_frame,
            text="0%",
            font=self.text_font,
            bg='#ecf0f1',
            fg='#2c3e50'
        )
        self.progress_percent.pack(anchor='e')
        
        # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
        self.progress_frame.pack_forget()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        self.refresh_file_list()
    
    def create_ai_panel(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Ä–∞–±–æ—Ç—ã —Å –ò–ò"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(
            parent,
            text="ü§ñ –†–∞–±–æ—Ç–∞ —Å –ò–ò",
            font=self.title_font,
            bg='#ecf0f1',
            fg='#2c3e50'
        )
        title_label.pack(pady=(0, 10))
        
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        model_frame = tk.Frame(parent, bg='#ecf0f1')
        model_frame.pack(fill='x', pady=(0, 10))
        
        model_label = tk.Label(
            model_frame,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
            font=self.button_font,
            bg='#ecf0f1',
            fg='#2c3e50'
        )
        model_label.pack(side='left')
        
        self.model_var = tk.StringVar(value="–û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å")
        self.model_combo = ttk.Combobox(
            model_frame,
            textvariable=self.model_var,
            values=["–û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å"],
            state="readonly",
            width=20
        )
        self.model_combo.pack(side='left', padx=(10, 0))
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥–µ–ª–∏
        self.model_status_label = tk.Label(
            model_frame,
            text="‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞...",
            font=self.button_font,
            bg='#ecf0f1',
            fg='#e67e22'
        )
        self.model_status_label.pack(side='left', padx=(10, 0))
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞
        prompt_frame = tk.Frame(parent, bg='#ecf0f1')
        prompt_frame.pack(fill='x', pady=(0, 10))
        
        prompt_label = tk.Label(
            prompt_frame,
            text="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç:",
            font=self.button_font,
            bg='#ecf0f1',
            fg='#2c3e50'
        )
        prompt_label.pack(anchor='w', pady=(0, 5))
        
        self.prompt_text = scrolledtext.ScrolledText(
            prompt_frame,
            height=4,
            font=self.text_font,
            wrap=tk.WORD
        )
        self.prompt_text.pack(fill='x')
        
        # –ö–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generate_buttons_frame = tk.Frame(parent, bg='#ecf0f1')
        generate_buttons_frame.pack(fill='x', pady=(0, 10))
        
        self.generate_btn = tk.Button(
            generate_buttons_frame,
            text="üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç",
            font=self.button_font,
            command=self.generate_response,
            bg='#27ae60',
            fg='white',
            relief='flat',
            padx=20,
            pady=10
        )
        self.generate_btn.pack(side='left', padx=(0, 10))
        
        self.clear_btn = tk.Button(
            generate_buttons_frame,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å",
            font=self.button_font,
            command=self.clear_texts,
            bg='#95a5a6',
            fg='white',
            relief='flat',
            padx=20,
            pady=10
        )
        self.clear_btn.pack(side='left')
        
        # –ü–æ–ª–µ –≤—ã–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞
        response_frame = tk.Frame(parent, bg='#ecf0f1')
        response_frame.pack(fill='both', expand=True)
        
        response_label = tk.Label(
            response_frame,
            text="–û—Ç–≤–µ—Ç –ò–ò: (Ctrl+C - –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å, Ctrl+A - –≤—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ, –ü–ö–ú - –º–µ–Ω—é)",
            font=self.button_font,
            bg='#ecf0f1',
            fg='#2c3e50'
        )
        response_label.pack(anchor='w', pady=(0, 5))
        
        self.response_text = scrolledtext.ScrolledText(
            response_frame,
            height=15,
            font=self.text_font,
            wrap=tk.WORD,
            state='disabled'
        )
        self.response_text.pack(fill='both', expand=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_copy_functionality()
    
    def setup_copy_functionality(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—è –æ—Ç–≤–µ—Ç–∞"""
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–ª–∞–≤–∏—à
        self.response_text.bind('<Control-c>', self.copy_text)
        self.response_text.bind('<Control-C>', self.copy_text)
        self.response_text.bind('<Control-a>', self.select_all_text)
        self.response_text.bind('<Control-A>', self.select_all_text)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤—ã–π –∫–ª–∏–∫ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
        self.response_text.bind('<Button-3>', self.show_context_menu)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.context_menu = tk.Menu(self.root, tearoff=0)
        self.context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å (Ctrl+C)", command=self.copy_text)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="–í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ (Ctrl+A)", command=self.select_all_text)
    
    def copy_text(self, event=None):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            selected_text = self.response_text.get(tk.SEL_FIRST, tk.SEL_LAST)
            if selected_text:
                # –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                self.root.clipboard_clear()
                self.root.clipboard_append(selected_text)
                self.update_status("‚úÖ –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
            else:
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥–µ–ª–µ–Ω–æ, –∫–æ–ø–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
                all_text = self.response_text.get("1.0", tk.END).strip()
                if all_text:
                    self.root.clipboard_clear()
                    self.root.clipboard_append(all_text)
                    self.update_status("‚úÖ –í–µ—Å—å –æ—Ç–≤–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
                else:
                    self.update_status("‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
        except tk.TclError:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥–µ–ª–µ–Ω–æ, –∫–æ–ø–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            all_text = self.response_text.get("1.0", tk.END).strip()
            if all_text:
                self.root.clipboard_clear()
                self.root.clipboard_append(all_text)
                self.update_status("‚úÖ –í–µ—Å—å –æ—Ç–≤–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
            else:
                self.update_status("‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            self.update_status("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def select_all_text(self):
        """–í—ã–¥–µ–ª—è–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –æ—Ç–≤–µ—Ç–∞"""
        try:
            self.response_text.tag_add(tk.SEL, "1.0", tk.END)
            self.response_text.mark_set(tk.INSERT, "1.0")
            self.response_text.see(tk.INSERT)
            self.update_status("‚úÖ –í–µ—Å—å —Ç–µ–∫—Å—Ç –≤—ã–¥–µ–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
            self.update_status("‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞")
    
    def show_context_menu(self, event):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –ø—Ä–∞–≤–æ–º –∫–ª–∏–∫–µ"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤ –ø–æ–∑–∏—Ü–∏–∏ –∫–ª–∏–∫–∞
            self.context_menu.tk_popup(event.x_root, event.y_root)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
    
    def create_status_bar(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç—É—Å-–±–∞—Ä"""
        self.status_var = tk.StringVar()
        self.status_var.set("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        status_bar = tk.Label(
            self.root,
            textvariable=self.status_var,
            relief=tk.SUNKEN,
            anchor='w',
            bg='#bdc3c7',
            fg='#2c3e50',
            font=self.text_font
        )
        status_bar.pack(side='bottom', fill='x')
    
    def load_models(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª–∏ –ò–ò"""
        try:
            self.update_status("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...")
            logger.info(f"–ò—â–µ–º –º–æ–¥–µ–ª–∏ –≤: {self.MODELS_DIR}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            trained_model_path = self.MODELS_DIR / "history_ai_trained"
            logger.info(f"–ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏: {trained_model_path}")
            logger.info(f"–ú–æ–¥–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {trained_model_path.exists()}")
            
            if trained_model_path.exists():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –º–æ–¥–µ–ª–∏
                model_files = list(trained_model_path.glob("*"))
                logger.info(f"–§–∞–π–ª—ã –≤ –º–æ–¥–µ–ª–∏: {len(model_files)}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                self.model_status_label.config(text="‚úÖ –ì–æ—Ç–æ–≤–∞", fg='#27ae60')
                
                self.update_status("‚úÖ –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
                logger.info("–û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                self.model_status_label.config(text="‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞", fg='#e74c3c')
                
                self.update_status("‚ö†Ô∏è –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                logger.warning("–û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                logger.warning(f"–û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å: {trained_model_path}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
            self.update_status(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
    
    def upload_file(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É data/raw"""
        try:
            file_paths = filedialog.askopenfilenames(
                title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)",
                filetypes=[
                    ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*"),
                    ("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"),
                    ("CSV —Ñ–∞–π–ª—ã", "*.csv"),
                    ("JSON —Ñ–∞–π–ª—ã", "*.json"),
                    ("PDF —Ñ–∞–π–ª—ã", "*.pdf"),
                    ("Word –¥–æ–∫—É–º–µ–Ω—Ç—ã", "*.doc;*.docx"),
                    ("DJVU —Ñ–∞–π–ª—ã", "*.djvu"),
                    ("FB2 –∫–Ω–∏–≥–∏", "*.fb2"),
                    ("–î–æ–∫—É–º–µ–Ω—Ç—ã", "*.doc;*.docx;*.pdf;*.djvu;*.fb2")
                ]
            )
            
            if file_paths:
                import shutil
                uploaded_files = []
                failed_files = []
                
                for file_path in file_paths:
                    try:
                        filename = os.path.basename(file_path)
                        dest_path = self.DATA_DIR / "raw" / filename
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
                        if dest_path.exists():
                            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∫ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                            base_name = dest_path.stem
                            extension = dest_path.suffix
                            counter = 1
                            while dest_path.exists():
                                new_name = f"{base_name}_{counter}{extension}"
                                dest_path = self.DATA_DIR / "raw" / new_name
                                counter += 1
                        
                        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                        shutil.copy2(file_path, dest_path)
                        uploaded_files.append(filename)
                        
                    except Exception as e:
                        failed_files.append(f"{os.path.basename(file_path)}: {e}")
                        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if uploaded_files:
                    success_message = f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(uploaded_files)}\n\n"
                    success_message += "üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n"
                    for filename in uploaded_files:
                        success_message += f"  ‚Ä¢ {filename}\n"
                    
                    if failed_files:
                        success_message += f"\n‚ùå –û—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ ({len(failed_files)} —Ñ–∞–π–ª–æ–≤):\n"
                        for error in failed_files:
                            success_message += f"  ‚Ä¢ {error}\n"
                    
                    success_message += f"\nüí° –°–æ–≤–µ—Ç: –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ\n"
                    success_message += f"–∫–Ω–æ–ø–∫—É '–ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏' –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤."
                    
                    messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏", success_message)
                    self.refresh_file_list()
                    self.update_status(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(uploaded_files)} —Ñ–∞–π–ª–æ–≤")
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞!")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã:\n{e}")
    
    def refresh_file_list(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"""
        try:
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
            for item in self.files_tree.get_children():
                self.files_tree.delete(item)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ data/raw
            raw_dir = self.DATA_DIR / "raw"
            if raw_dir.exists():
                for file_path in raw_dir.iterdir():
                    if file_path.is_file():
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                        size = self.format_file_size(file_path.stat().st_size)
                        date = file_path.stat().st_mtime
                        date_str = self.format_date(date)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
                        self.files_tree.insert(
                            '',
                            'end',
                            text=file_path.name,
                            values=(size, date_str)
                        )
            
            self.update_status("–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
            self.update_status(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")
    
    def format_file_size(self, size_bytes):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞"""
        if size_bytes < 1024:
            return f"{size_bytes} –ë"
        elif size_bytes < 1024 * 1024:
            return f"{size_bytes / 1024:.1f} –ö–ë"
        else:
            return f"{size_bytes / (1024 * 1024):.1f} –ú–ë"
    
    def format_date(self, timestamp):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É"""
        import datetime
        return datetime.datetime.fromtimestamp(timestamp).strftime("%d.%m.%Y %H:%M")
    
    def on_file_double_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ —Ñ–∞–π–ª—É"""
        try:
            selection = self.files_tree.selection()
            if selection:
                item = self.files_tree.item(selection[0])
                filename = item['text']
                file_path = self.DATA_DIR / "raw" / filename
                
                if file_path.exists():
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                    stat = file_path.stat()
                    size = self.format_file_size(stat.st_size)
                    date = self.format_date(stat.st_mtime)
                    
                    messagebox.showinfo(
                        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ",
                        f"üìÅ –§–∞–π–ª: {filename}\n"
                        f"üìè –†–∞–∑–º–µ—Ä: {size}\n"
                        f"üìÖ –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {date}\n"
                        f"üìç –ü—É—Ç—å: {file_path}"
                    )
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ:\n{e}")
    
    def open_data_folder(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            raw_dir = self.DATA_DIR / "raw"
            if raw_dir.exists():
                os.startfile(str(raw_dir))
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–∞–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É:\n{e}")
    
    def retrain_models(self):
        """–ü–µ—Ä–µ–æ–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª–∏"""
        try:
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏
            choice = messagebox.askyesnocancel(
                "–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π",
                "üéì –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è:\n\n"
                "‚Ä¢ –î–ê - –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫—É—é –º–æ–¥–µ–ª—å\n"
                "‚Ä¢ –ù–ï–¢ - –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å —Ä—É—Å—Å–∫—É—é –º–æ–¥–µ–ª—å\n"
                "‚Ä¢ –û–¢–ú–ï–ù–ê - –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"
            )
            
            if choice is None:  # –û—Ç–º–µ–Ω–∞
                return
            elif choice:  # –ê–Ω–≥–ª–∏–π—Å–∫–∞—è –º–æ–¥–µ–ª—å
                self.retrain_english_model()
            else:  # –†—É—Å—Å–∫–∞—è –º–æ–¥–µ–ª—å
                self.retrain_russian_model()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è:\n{e}")
    
    def retrain_english_model(self):
        """–ü–µ—Ä–µ–æ–±—É—á–∞–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫—É—é –º–æ–¥–µ–ª—å"""
        def train_thread():
            try:
                self.retrain_btn.config(state='disabled')
                self.progress_frame.pack(fill='x', pady=(10, 0))
                self.progress_bar['value'] = 0
                self.progress_percent.config(text="0%")
                
                self.update_status("–ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –º–æ–¥–µ–ª–∏...")
                self.update_progress(10, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
                script_path = self.SRC_DIR / "train_model_incremental.py"
                if script_path.exists():
                    result = subprocess.run(
                        [sys.executable, str(script_path), "--data", str(self.DATA_DIR / "raw"), "--epochs", "1", "--model", "distilgpt2"],
                        cwd=str(self.BASE_DIR),
                        capture_output=True,
                        text=True,
                        encoding='utf-8',
                        errors='replace'
                    )
                    
                    if result.returncode == 0:
                        self.update_progress(100, "–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                        self.update_status("–ê–Ω–≥–ª–∏–π—Å–∫–∞—è –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤ –∫–æ–Ω—Å–æ–ª—å
                        print(f"\n{'='*60}")
                        print("–ü–ï–†–ï–û–ë–£–ß–ï–ù–ò–ï –ê–ù–ì–õ–ò–ô–°–ö–û–ô –ú–û–î–ï–õ–ò –ó–ê–í–ï–†–®–ï–ù–û")
                        print(f"{'='*60}")
                        print("–í—ã–≤–æ–¥ —Å–∫—Ä–∏–ø—Ç–∞:")
                        print(result.stdout)
                        print(f"{'='*60}")
                        messagebox.showinfo("–£—Å–ø–µ—Ö", "–ê–Ω–≥–ª–∏–π—Å–∫–∞—è –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                    else:
                        error_msg = result.stderr if result.stderr else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                        print(f"\n{'='*60}")
                        print("–û–®–ò–ë–ö–ê –ü–ï–†–ï–û–ë–£–ß–ï–ù–ò–Ø –ê–ù–ì–õ–ò–ô–°–ö–û–ô –ú–û–î–ï–õ–ò")
                        print(f"{'='*60}")
                        print("–û—à–∏–±–∫–∞:", error_msg)
                        print("–í—ã–≤–æ–¥:", result.stdout)
                        print(f"{'='*60}")
                        raise Exception(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {error_msg}")
                else:
                    raise Exception("–°–∫—Ä–∏–ø—Ç –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –º–æ–¥–µ–ª–∏: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è:\n{e}")
                self.update_status(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {e}")
            finally:
                self.retrain_btn.config(state='normal')
                self.progress_frame.pack_forget()
        
        thread = threading.Thread(target=train_thread, daemon=True)
        thread.start()
    
    def retrain_russian_model(self):
        """–ü–µ—Ä–µ–æ–±—É—á–∞–µ—Ç —Ä—É—Å—Å–∫—É—é –º–æ–¥–µ–ª—å"""
        def train_thread():
            try:
                self.retrain_btn.config(state='disabled')
                self.progress_frame.pack(fill='x', pady=(10, 0))
                self.progress_bar['value'] = 0
                self.progress_percent.config(text="0%")
                
                self.update_status("–ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ —Ä—É—Å—Å–∫–æ–π –º–æ–¥–µ–ª–∏...")
                self.update_progress(10, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–π –º–æ–¥–µ–ª–∏
                script_path = self.SRC_DIR / "train_model_incremental.py"
                if script_path.exists():
                    result = subprocess.run(
                        [sys.executable, str(script_path), "--data", str(self.DATA_DIR / "raw"), "--epochs", "1", "--model", "ai-forever/rugpt3small_based_on_gpt2"],
                        cwd=str(self.BASE_DIR),
                        capture_output=True,
                        text=True,
                        encoding='utf-8',
                        errors='replace'
                    )
                    
                    if result.returncode == 0:
                        self.update_progress(100, "–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                        self.update_status("–†—É—Å—Å–∫–∞—è –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤ –∫–æ–Ω—Å–æ–ª—å
                        print(f"\n{'='*60}")
                        print("–ü–ï–†–ï–û–ë–£–ß–ï–ù–ò–ï –†–£–°–°–ö–û–ô –ú–û–î–ï–õ–ò –ó–ê–í–ï–†–®–ï–ù–û")
                        print(f"{'='*60}")
                        print("–í—ã–≤–æ–¥ —Å–∫—Ä–∏–ø—Ç–∞:")
                        print(result.stdout)
                        print(f"{'='*60}")
                        messagebox.showinfo("–£—Å–ø–µ—Ö", "–†—É—Å—Å–∫–∞—è –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                    else:
                        error_msg = result.stderr if result.stderr else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                        print(f"\n{'='*60}")
                        print("–û–®–ò–ë–ö–ê –ü–ï–†–ï–û–ë–£–ß–ï–ù–ò–Ø –†–£–°–°–ö–û–ô –ú–û–î–ï–õ–ò")
                        print(f"{'='*60}")
                        print("–û—à–∏–±–∫–∞:", error_msg)
                        print("–í—ã–≤–æ–¥:", result.stdout)
                        print(f"{'='*60}")
                        raise Exception(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {error_msg}")
                else:
                    raise Exception("–°–∫—Ä–∏–ø—Ç –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–π –º–æ–¥–µ–ª–∏: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è:\n{e}")
                self.update_status(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {e}")
            finally:
                self.retrain_btn.config(state='normal')
                self.progress_frame.pack_forget()
        
        thread = threading.Thread(target=train_thread, daemon=True)
        thread.start()
    
    def update_progress(self, value, message):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        self.progress_bar['value'] = value
        self.progress_percent.config(text=f"{value}%")
        self.update_status(message)
        self.root.update_idletasks()
    
    def generate_response(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞"""
        try:
            prompt = self.prompt_text.get("1.0", tk.END).strip()
            if not prompt:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!")
                return
            
            model_type = self.model_var.get()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
            model_path = "models/history_ai_trained"
            model_display_name = "–æ–±—É—á–µ–Ω–Ω–æ–π"
            
            self.update_status(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é {model_display_name} –º–æ–¥–µ–ª–∏...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def generate_thread():
                try:
                    self.generate_btn.config(state='disabled')
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    script_path = self.SRC_DIR / "generate_text.py"
                    if script_path.exists():
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏
                        env = os.environ.copy()
                        env['PYTHONIOENCODING'] = 'utf-8'
                        env['PYTHONUTF8'] = '1'
                        
                        result = subprocess.run(
                            [sys.executable, str(script_path), "--prompt", prompt, "--model", model_path],
                            cwd=str(self.BASE_DIR),
                            capture_output=True,
                            text=True,
                            encoding='utf-8',
                            errors='replace',
                            env=env
                        )
                        
                        if result.returncode == 0:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –ò–ò –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞
                            output_lines = result.stdout.strip().split('\n')
                            response = ""
                            in_answer_section = False
                            
                            for line in output_lines:
                                if line.startswith("–û–¢–í–ï–¢ –ò–ò:"):
                                    in_answer_section = True
                                    continue
                                elif line.startswith("="*60) and in_answer_section:
                                    break
                                elif in_answer_section and line.strip():
                                    response += line + "\n"
                            
                            if not response:
                                response = result.stdout.strip()
                            
                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
                            if response:
                                try:
                                    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É
                                    response = response.encode('utf-8', errors='ignore').decode('utf-8')
                                except:
                                    pass
                            
                            # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
                            print(f"\n{'='*60}")
                            print(f"–û–¢–í–ï–¢ –ò–ò (–∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞):")
                            print(f"{'='*60}")
                            print(response)
                            print(f"{'='*60}")
                            print(f"–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
                            print(f"{'='*60}")
                            
                            self.root.after(0, lambda: self.display_response(response))
                            self.update_status("–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –≤—ã–≤–µ–¥–µ–Ω –≤ –∫–æ–Ω—Å–æ–ª—å")
                        else:
                            raise Exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result.stderr}")
                    else:
                        raise Exception("–°–∫—Ä–∏–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        
                except Exception as e:
                    error_msg = str(e)
                    logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error_msg}")
                    self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n{error_msg}"))
                    self.root.after(0, lambda: self.update_status(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error_msg}"))
                finally:
                    self.root.after(0, lambda: self.generate_btn.config(state='normal'))
            
            thread = threading.Thread(target=generate_thread, daemon=True)
            thread.start()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n{e}")
    
    def display_response(self, response):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Ç–≤–µ—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ"""
        self.response_text.config(state='normal')
        self.response_text.delete("1.0", tk.END)
        self.response_text.insert("1.0", response)
        self.response_text.config(state='disabled')
    
    def clear_texts(self):
        """–û—á–∏—â–∞–µ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –≤—ã–≤–æ–¥–∞"""
        self.prompt_text.delete("1.0", tk.END)
        self.response_text.config(state='normal')
        self.response_text.delete("1.0", tk.END)
        self.response_text.config(state='disabled')
        self.update_status("–ü–æ–ª—è –æ—á–∏—â–µ–Ω—ã")
    
    def test_model(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            english_model_path = self.MODELS_DIR / "english_model"
            russian_model_path = self.MODELS_DIR / "russian_model"
            
            available_models = []
            if english_model_path.exists():
                available_models.append(("–ê–Ω–≥–ª–∏–π—Å–∫–∞—è –º–æ–¥–µ–ª—å", str(english_model_path), "english"))
            if russian_model_path.exists():
                available_models.append(("–†—É—Å—Å–∫–∞—è –º–æ–¥–µ–ª—å", str(russian_model_path), "russian"))
            
            if not available_models:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                    "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π!\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '–ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏'.")
                return
            
            # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if len(available_models) == 1:
                model_name, model_path, model_type = available_models[0]
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
                from tkinter import simpledialog
                choice = simpledialog.askstring(
                    "–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏",
                    "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
                    "1 - –ê–Ω–≥–ª–∏–π—Å–∫–∞—è –º–æ–¥–µ–ª—å\n"
                    "2 - –†—É—Å—Å–∫–∞—è –º–æ–¥–µ–ª—å\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2):"
                )
                
                if choice == "1" and any(m[2] == "english" for m in available_models):
                    model_name, model_path, model_type = next(m for m in available_models if m[2] == "english")
                elif choice == "2" and any(m[2] == "russian" for m in available_models):
                    model_name, model_path, model_type = next(m for m in available_models if m[2] == "russian")
                else:
                    return
            
            self.update_status(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º {model_name}...")
            self.test_btn.config(state='disabled')
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def test_thread():
                try:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    script_path = self.SRC_DIR / "quick_model_test.py"
                    if script_path.exists():
                        result = subprocess.run(
                            [sys.executable, str(script_path), model_path, "--type", model_type],
                            cwd=str(self.BASE_DIR),
                            capture_output=True,
                            text=True,
                            encoding='utf-8'
                        )
                        
                        if result.returncode == 0:
                            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            output = result.stdout
                            if "–û–¢–õ–ò–ß–ù–û" in output:
                                message = f"üéâ {model_name} –æ—Ç–ª–∏—á–Ω–æ –∏–∑—É—á–∏–ª–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã!"
                            elif "–•–û–†–û–®–û" in output:
                                message = f"üëç {model_name} —Ö–æ—Ä–æ—à–æ –∏–∑—É—á–∏–ª–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã!"
                            elif "–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û" in output:
                                message = f"‚ö†Ô∏è {model_name} —á–∞—Å—Ç–∏—á–Ω–æ –∏–∑—É—á–∏–ª–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"
                            else:
                                message = f"‚ùå {model_name} —Å–ª–∞–±–æ –∏–∑—É—á–∏–ª–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"
                            
                            messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞", 
                                f"{message}\n\n"
                                f"–ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n{output}")
                            self.update_status(f"–¢–µ—Å—Ç {model_name} –∑–∞–≤–µ—Ä—à–µ–Ω")
                        else:
                            error_msg = result.stderr or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                            messagebox.showerror("–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", 
                                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏:\n{error_msg}")
                            self.update_status("–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏")
                    else:
                        messagebox.showerror("–û—à–∏–±–∫–∞", "–°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                        self.update_status("–°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏:\n{e}")
                    self.update_status("–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏")
                finally:
                    self.test_btn.config(state='normal')
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            import threading
            thread = threading.Thread(target=test_thread, daemon=True)
            thread.start()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ –º–æ–¥–µ–ª–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –º–æ–¥–µ–ª–∏:\n{e}")
            self.update_status("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞")

    def update_status(self, message):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å-–±–∞—Ä"""
        self.status_var.set(message)
        logger.info(message)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        self.root.mainloop()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        app = UniversalHistoryInterface()
        app.run()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n{e}")

if __name__ == "__main__":
    main()
