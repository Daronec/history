#!/usr/bin/env python3
"""
Windows –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è EXE –≤–µ—Ä—Å–∏–∏ –ò–ò-–ò—Å—Ç–æ—Ä–∏—è
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
"""

import sys
import os
import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext
import threading
import subprocess
import json
from pathlib import Path
import logging

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows
if sys.platform.startswith('win'):
    import codecs
    try:
        sys.stdout = codecs.getwriter('utf-8')(sys.stdout.detach())
        sys.stderr = codecs.getwriter('utf-8')(sys.stderr.detach())
    except:
        pass

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/interface_exe.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ExeHistoryInterface:
    def __init__(self):
        self.root = tk.Tk()
        self.setup_paths()
        self.setup_ui()
        self.load_models()
        
    def is_exe(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –∫–∞–∫ exe —Ñ–∞–π–ª"""
        return getattr(sys, 'frozen', False)
    
    def setup_paths(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—É—Ç–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ exe —Ä–µ–∂–∏–º–µ"""
        if self.is_exe():
            # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ exe
            self.base_dir = os.path.dirname(sys.executable)
        else:
            # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç
            self.base_dir = os.path.dirname(os.path.abspath(__file__))
        
        # –ü—É—Ç–∏ –∫ —Ä–µ—Å—É—Ä—Å–∞–º
        self.models_path = os.path.join(self.base_dir, 'models')
        self.data_path = os.path.join(self.base_dir, 'data')
        self.configs_path = os.path.join(self.base_dir, 'configs')
        
        logger.info(f"–ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.base_dir}")
        logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥–µ–ª–µ–π: {self.models_path}")
        logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: {self.data_path}")
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.root.title("–ò–ò –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ - EXE –≤–µ—Ä—Å–∏—è")
        self.root.geometry("900x700")
        self.root.configure(bg='#f0f0f0')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–∞
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(3, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="üèõÔ∏è –ò–ò –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ - EXE –≤–µ—Ä—Å–∏—è", 
                               font=('Arial', 16, 'bold'))
        title_label.grid(row=0, column=0, columnspan=2, pady=(0, 20))
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞
        ttk.Label(main_frame, text="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç:").grid(row=1, column=0, sticky=tk.W, pady=(0, 5))
        self.prompt_entry = tk.Text(main_frame, height=3, width=60)
        self.prompt_entry.grid(row=1, column=1, sticky=(tk.W, tk.E), pady=(0, 5))
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=2, column=0, columnspan=2, pady=(10, 0))
        
        self.generate_button = ttk.Button(button_frame, text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç", 
                                         command=self.generate_text)
        self.generate_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.clear_button = ttk.Button(button_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", 
                                      command=self.clear_text)
        self.clear_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.retrain_button = ttk.Button(button_frame, text="–ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", 
                                        command=self.retrain_model)
        self.retrain_button.pack(side=tk.LEFT)
        
        # –ü–æ–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        ttk.Label(main_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç:").grid(row=3, column=0, sticky=tk.W, pady=(20, 5))
        self.result_text = scrolledtext.ScrolledText(main_frame, height=15, width=80)
        self.result_text.grid(row=4, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = ttk.Label(main_frame, text="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        self.status_label.grid(row=5, column=0, columnspan=2, pady=(10, 0))
        
    def load_models(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π"""
        self.status_label.config(text="–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...")
        self.root.update()
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
            src_path = os.path.join(self.base_dir, 'src')
            if os.path.exists(src_path):
                sys.path.append(src_path)
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
            from models.history_ai import HistoryAIModel
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
            model_path = os.path.join(self.models_path, 'history_ai_trained')
            self.model = HistoryAIModel()
            self.model.load_trained_model(model_path)
            
            self.status_label.config(text="‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
            logger.info("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
        except Exception as e:
            self.status_label.config(text=f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            self.model = None
    
    def generate_text(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞"""
        if not self.model:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            return
            
        prompt = self.prompt_entry.get("1.0", tk.END).strip()
        if not prompt:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç!")
            return
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        self.status_label.config(text="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞...")
        self.generate_button.config(state='disabled')
        self.root.update()
        
        def generate():
            try:
                result = self.model.generate_text(prompt, max_length=150, temperature=0.7)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                self.root.after(0, lambda: self.show_result(result))
                
            except Exception as e:
                self.root.after(0, lambda: self.show_error(str(e)))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=generate)
        thread.daemon = True
        thread.start()
    
    def show_result(self, result):
        """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        self.result_text.delete("1.0", tk.END)
        self.result_text.insert("1.0", result)
        self.status_label.config(text="‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        self.generate_button.config(state='normal')
    
    def show_error(self, error):
        """–ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏"""
        self.result_text.delete("1.0", tk.END)
        self.result_text.insert("1.0", f"–û—à–∏–±–∫–∞: {error}")
        self.status_label.config(text="‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        self.generate_button.config(state='normal')
    
    def clear_text(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
        self.prompt_entry.delete("1.0", tk.END)
        self.result_text.delete("1.0", tk.END)
        self.status_label.config(text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    def retrain_model(self):
        """–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        result = messagebox.askyesno("–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ", 
                                   "–ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å? –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
        if result:
            self.status_label.config(text="–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
            self.root.update()
            
            def retrain():
                try:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
                    script_path = os.path.join(self.base_dir, 'src', 'train_model.py')
                    if os.path.exists(script_path):
                        subprocess.run([sys.executable, script_path], 
                                     cwd=self.base_dir, check=True)
                        self.root.after(0, lambda: self.retrain_complete())
                    else:
                        self.root.after(0, lambda: self.show_error("–°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"))
                        
                except Exception as e:
                    self.root.after(0, lambda: self.show_error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {e}"))
            
            thread = threading.Thread(target=retrain)
            thread.daemon = True
            thread.start()
    
    def retrain_complete(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è"""
        self.status_label.config(text="–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
        self.root.update()
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        self.load_models()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ EXE Windows –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        self.root.mainloop()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
        os.makedirs('logs', exist_ok=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        app = ExeHistoryInterface()
        app.run()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {e}")

if __name__ == "__main__":
    main()
